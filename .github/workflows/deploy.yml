name: Team5 CI/CD Pipeline
on:
  pull_request:
    branches:
      - develop
      - main
  push:
    branches:
      - develop
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
      # git checkout 실행
      - name: checkout
        uses: actions/checkout@v4
        
      #  JAVA 설치
      - name: setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: gradle
          cache-dependency-path: '**/build.gradle*'
          
      # application.yml 생성
      - name: generate application.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION }}" > ./application.yml
          
      # 빌드할 수 있는 권한 부여
      - name: grant execute permission for gradlew
        run: chmod +x ./gradlew
        
      # 테스트 후 빌드
      - name: build with gradle
        run: ./gradlew clean build
        shell: bash
        
      # 빌드 시점 시간 기록
      - name: get current time
        uses: 1466587594/get-current-time@v2 # 타임존 설정
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00" #한국 시간
          
      # 시간 조회
      - name: show current time
        run: echo "CurrentTime=${{ steps.current-time.outputs.formattedTime }}"
        shell: bash

      - name: 테스트 결과를 PR 코멘트로 출력
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'

      - name: 테스트 실패 시, 오류가 발생한 코드 라인에 코멘트 추가
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
        
      # jar 파일이 있는지 확인
      - name: List files in build/libs
        run: ls -al build/libs/

      # upload .jar
      - name: upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: build/libs/*.jar
      
  # deploy: 배포 작업을 수행하는 job을 정의
  deploy:
    needs: build # 빌드가 성공해야 배포
    runs-on: ubuntu-latest
    
    # github 이벤트가 main 브랜치 push인 경우, 배포 실행 
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    
      # git checkout 실행
      - name: checkout
        uses: actions/checkout@v4
        
      #  JAVA 살치
      - name: setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: gradle
          cache-dependency-path: '**/build.gradle*'
      
      # download .jar
      - name: download JAR
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: build/libs/
          
      # jar 파일이 있는지 확인
      - name: List files in build/libs
        run: ls -l build/libs/
        
      # AWS Elastic Beanstalk에 JAR 배포
      - name: deploy to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }} # IAM 사용자 생성 후 발급받은 Access Key
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # IAM 사용자 생성 후 발급받은 Secret Access Key
          application_name: team5_kkangtong #EB 애플리케이션 이름
          environment_name: Team5kkangtong-env  #EB 환경 이름
          version_label: github-action-${{steps.current-time.outputs.formattedTime}}
          region: ap-northeast-2 # 서울 서버
          deployment_package: build/libs/*.jar
          use_existing_version_if_available: true
